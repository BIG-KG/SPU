push 0
push 5
look
pop [10]
push 0
pop [11]
push 0.1
pop [9]

push 3.1415
pop [1]
push 5
pop [0]
push 0.5
pop [3]
push 1
pop [4]

push 3
pop [5]
push 3
pop [6]

push 12
pop [7]
push 25
pop [8]

^main
    push [9]
    push [8]
    sub
    pop AX
    push AX
    push AX
    mul

    push [10]
    push [10]
    mul
    add

    push [11]
    push [11]
    mul
    add

    sqrt
    pop [2]

    push 8148
    look

    call :calculate_screen

    end

^calculate_screen

    push 1884
    look

    push 0
    pop [23]


    ^while_i<scrXscrY


    push [5]
    push 2
    call :nacel

    push [23]
    push [5]
    call :ostat
    sub

    push [5]
    push 2
    div

    div

    push [1]
    push 4
    div
    mul
    sin
    pop [13]




    push [6]
    push 2
    call :nacel

    push [23]
    push [5]
    call :nacel
    sub

    push [6]
    push 2
    div

    div

    push [1]
    push 4
    div
    mul
    sin
    pop [14]

    push 5555
    look
    push [23]
    look

    call :calculate_ray

    push [23]
    push 3
    mul
    pop DX

    look
    look
    look

    push 456
    look
    push [23]
    push 1
    add
    pop [23]

    push [23]
    push [5]
    push [6]
    mul

    jmpm :while_i<scrXscrY

    ret




^calculate_ray

    push 3333
    look

    push 0
    pop [18]
    push 0
    pop [19]
    push 0
    pop [20]

    push 1488
    look
    push [13]
    look
    push [0]
    push [13]
    mul
    look
    push 8814
    look


    ^while_z
        push 777
        look
        push [20]
        look
        push AX
        look

        push [0]
        push [20]
        add
        pop [20]

        push [0]
        push [13]
        mul
        push [18]
        add
        pop [18]

        push [0]
        push [14]
        mul
        push [19]
        add
        pop [19]


        push [8]
        push [20]
        pop AX
        push AX
        push AX
        mul

        push [18]
        push [18]
        mul

        push [19]
        push [19]
        mul

        add
        add
        sqrt
        pop AX
        push AX

        push [7]
        jmpl :toch

        push 888
        look
        push [20]
        look

        push [20]
        push [8]
        jmpm :while_z

    push 0
    push 0
    push 0
    push 66666
    look

    ret

    ^toch
        push 743
        look
        push 2500

        call :shirsh
        pop CX
        pop BX
        pop AX

        push AX
        push AX
        mul
        add
        pop AX

        push BX
        push BX
        mul
        pop BX

        push CX
        push CX
        mul
        pop CX



        push AX
        sqrt
        call :nm_256

        push BX
        sqrt
        call :nm_256

        push CX
        sqrt
        call :nm_256

        push 909
        look
        ret





^nacel
    pop CX
    pop AX
    push 0
    pop BX



    ^uuu


        push BX
        push CX
        add
        pop BX
        push BX
        push AX

        jmpl :find

        jmp :uuu

    ^find
        push BX
        push CX
        sub

        push CX
        div
        ret

^ostat
    call :nacel
    push CX
    mul
    pop DX

    push AX
    push DX
    sub

    ret

~for_func__calc_ray
^nm_256
    pop DX
    push DX
    pop 256

    jmpl :less

    push DX
    ret

    ^less_256
        push 256
        ret

^shirsh
    push 6789
    look
    push [18]
    push [10]
    sub
    pop AX
    push AX
    push AX
    mul

    push [19]
    push [11]
    sub
    pop AX
    push AX
    push AX
    mul

    push [20]
    push [9]
    sub
    pop AX
    push AX
    push AX
    mul

    add
    add
    sqrt

    push [8]
    push [2]
    call :angl
    pop [21]
    push [1]
    push [21]
    sub
    pop [21]

    push [21]
    cos
    call :nl_0
    push 256
    mul
    push [3]
    mul

    pop AX
    push AX
    push AX
    push AX
    ret



^angl
    pop CX
    pop BX
    pop AX

    push AX
    push AX
    mul
    push BX
    push BX
    mul
    add
    push CX
    push CX
    sub

    push 2
    mul
    push AX
    mul
    push BX

    div
    acos
    ret

^nl_0
    pop AX
    push AX
    push 0
    jmpm :less_0

    push AX
    ret

    ^less_0
        push 0
        ret

~end_for_shirsh
